i <<- NULL
}
get <- function() x
setInverse <- function(inverse) i <<- inverse
getInverse <- function() i
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInverse(i)
i
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setInverse <- function(inverse) i <<- inverse
getInverse <- function() i
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInverse(i)
i
}
x <- matrix(1:4, nrow=2, ncol=2)
cacheSolve(x)
y <- makeCacheMatrix(x)
cacheSolve(y)
cacheSolve(y)
# makeCacheMatrix creates a special "vector", which is really a list containing
# a function to :-
#
# 1) set the value of the matrix
# 2) get the value of the matrix
# 3) set the value of the inverse of a matrix
# 4) get the value of the inverse of a matrix
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setInverse <- function(inverse) i <<- inverse
getInverse <- function() i
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
#cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix.
#If the inverse has already been calculated (and the matrix has not changed), then
#the cachesolve retrieves the inverse from the cache.
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInverse(i)
i
}
x <- makeCacheMatrix(matrix(25:100,nrow=3,ncol=3))
cacheSolve(x)
x <- makeCacheMatrix(matrix(1:4,nrow=2, ncol=2))
cacheSolve(x)
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
library(datasets)
data(iris)
?iris
head(iris)
y <- subset(iris, Species="virginica")
head(y)
y <- subset(iris, Species=="virginica")
head(y)
mean(y[["Sepal.Length"]])
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
debug(ls)
ls
ls
data(mtcars)
?mtcars
exit
c
library(datasets)
data(mtcars)
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
y <- subset(mtcars, cyl==4)
y <- subset(mtcars, cyl==8)
z <- subset(mtcars, cyl==4)
mean(y[["hp"]]) - mean(z[["hp"]])
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsasFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparision
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(student, sex, count, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?seperate()
??seperate
?separate
seperate(data=res, col=sex_class, into=c("sex", "class"))
separate(data=res, col=sex_class, into=c("sex", "class"))
submit()
student3
students3
submit()
submit()
reset()
submit()
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class=extract_numeric(class))
print
submit()
students4
submit()
submit()
submit()
submit()
submit()
passed
failed
x <- passed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
rbind_list(passed, failed)
sat
submit()
submit()
submit()
submit()
submit()
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
day(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
ymd(25081985)
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
now
this_moment <- update(this_moment, hours = 7, minutes = 15, seconds = 55)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
setwd("C:\\Users\\debraj\\Documents\\G and C Data\\Project")
?read.ftable
?read.table
trainData <- read.table("data\train\y_train.txt")
trainData <- read.table("data\\train\\y_train.txt")
head(trainData)
trainData <- read.table("data\\train\\X_train.txt")
trainLabel <- read.table("data\\train\\y_train.txt")
head(trainData)
head(trainData)
mergedTrainData <- cbind(trainData, trainLabel)
head(mergedTrainData)
l <- read.table("data\\activity_labels.txt")
l
l <- l$V2
l
l[1]
class(l)
as.list(l)
l <- read.table("data\\activity_labels.txt")
l[,"V2"]
l <- l[,"V2"]
class(l)
l <- read.table("data\\activity_labels.txt")
class(l)
l[,"V2"]
l$V2
l["V2"]
x <- l["V2"]
x
class(x)
as.list(x)
x <- as.list(x)
class(x)
x[1]
l[,"V2"]
x <- l[,1]
x
x <- l[,2]
x
x[1]
x[2]
class(x)
as.list(x)
l
x
levels(x)
levels(x)[1]
levels(x)[2]
l$V2[1]
levels(l$V2)[1]
levels(x)
l[1,]
l[1,]$V2
l$V2
as.character(l$V2)
x <- as.character(l$V2)
x
x[1]
x[2]
trainLabel <- read.table("data\\train\\y_train.txt")
trainLabel
head(trainLabel)
?apply
x
t <- apply(trainLabel,1, function(a) x[a])
head(t)
source("run_analysis.R")
source("run_analysis.R")
d <- mergeDataNLabel("data\\train\\X_train.txt", "data\\train\\y_train.txt", "data\\activity_labels.txt")
head(d)
source("run_analysis.R")
setwd("C:\\Users\\debraj\\Documents\\G and C Data\\Project")
getwd()
source("run_analysis.R")
setwd("C:\\Users\\debraj\\Documents\\G and C Data\\Project")
source("run_analysis.R")
f <- read.table("data/features.txt")
head(f)
source("run_analysis.R")
x
x <- readTable("data/train/subject_train.txt")
x <- read.table("data/train/subject_train.txt")
head(x)
source("run_analysis.R")
head(x)
source("run_analysis.R")
source("run_analysis.R")
head(x)
source("run_analysis.R")
head(data)
c(3,4) + c(5,1)
source("run_analysis.R")
source("run_analysis.R")
f
grep("mean\\(\\)|std\\(\\)", f[, 2])
class(grep("mean\\(\\)|std\\(\\)", f[, 2]))
grep("mean\\(\\)|std\\(\\)", f[, 2]) + c("Subject")
x <- grep("mean\\(\\)|std\\(\\)", f[, 2])
class(x)
source("run_analysis.R")
f
class(f)
?rbind
x <- data.frame(c(562, 563), c("subject", "activity"))
x
f    <- rbind(f,c(562, "subject"))
f <- rbind(f,c(562, "subject"))
f
f    <- read.table("./data/features.txt")
f    <- rbind(f,c(562, as.factor("subject"))
f
f
f    <- rbind(f,c(562, "subject")
v
f
str(f)
f
indices <- grep("mean\\(\\)|std\\(\\)", f[, 2])
indices
indices[57]
?add
c(f, "subject")
f
as.character(f[,2])
f <- as.character(f[,2])
f
c(f, "subject")
c(f, "subject", "activity")
grep("mean\\(\\)|std\\(\\)|^subject$|^activity$", f)
grep("mean\\(\\)|std\\(\\)|subject|activity", f)
grep("mean\\(\\)|std\\(\\)|subject\|activity\", f)
grep("subject|activity", f)
grep("subject", f)
f
f<- c(f, "subject", "activity")
grep("mean\\(\\)|std\\(\\)|^subject$|^activity$", f)
f<- c(f, "asubjects")
grep("mean\\(\\)|std\\(\\)|^subject$|^activity$", f)
source("run_analysis.R")
source("run_analysis.R")
head(data)
source("run_analysis.R")
source("run_analysis.R")
head(data)
source("run_analysis.R")
?tapply
?split
split(data, c("subject", "activity"))
x <- split(data, c("subject", "activity"))
x <- split(data, c(data$subject, data$activity))
x <- split(data, list(data$subject, data$activity))
head(x)
x[1]
?lapply
x[1]$activity
ncols(x)
nrowx(x)
nrow(x)
names(x[1])
x[1][1,]
x[1]
x[1][1,]
x[1][1]
x[1][1][1,]
x[1][1][1]
str(x)
x[1]
?colmeans
?colMeans
colMeans(x[1])
colMeans(x[1][1])
colMeans(x)
colMeans(x$1.LAYING)
x <- split(data, data$activity)
head(x)
library(dplyr)
data_df <- tbl_df(data)
data_df
?group_by
?summarise
summarise(tbl_df, tBodyAcc-mean()-X=mean(tBodyAcc-mean()-X))
summarise(tbl_df, mean(tBodyAcc-mean()-X))
summarise(tbl_df)
summarise(data_df, mean(tBodyAcc-mean()-X))
summarise(data_df)
data_df
summarise(data_df)
summarise(data_df, mean(tBodyAcc-mean()-X))
summarise(data_df, mean(subject)
)
names(data)
names(data) <- gsub("\\(\\)", "", names(data))
names(data)
names(data) <- gsub("-mean-", "Mean", names(data))
names(data) <- gsub("-std-", "Std", names(data))
names(data)
names(data) <- gsub("-std", "Std", names(data))
names(data) <- gsub("-mean", "Mean", names(data))
names(data)
data_df <- tbl_df(data)
summarise(data_df)
summarise(data_df, mean(tBodyAccMeanX))
group_by(data_df, "subject", "activity")
x <- group_by(data_df, "subject", "activity")
summarise(x, mean(tBodyAccMeanX))
data_df %>% group_by("subject", "activity") %>% summarise_each(func(mean))
data_df %>% group_by("subject", "activity") %>% summarise_each(funs(mean))
source("run_analysis.R")
source("run_analysis.R")
